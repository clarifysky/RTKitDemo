// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import QuartzCore;
@import ObjectiveC;
@import AVFoundation;
@import UIKit;
@import CoreGraphics;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface CALayer (SWIFT_EXTENSION(RTKit))
@end

@class NSData;
@class NSNotificationCenter;

SWIFT_CLASS("_TtC5RTKit7RTAudio")
@interface RTAudio : NSObject
@property (nonatomic, copy) NSString * _Nullable remoteSoundUrl;
@property (nonatomic, copy) NSString * _Nullable soundFile;
@property (nonatomic, strong) NSData * _Nullable soundData;
@property (nonatomic, copy) void (^ _Nullable completionHandler)(void);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)startRecording:(NSString * _Nonnull)soundFileName;
- (void)stopRecording;

/// Attempt to play remote sound.
///
/// \param loadingHandler Processing before remote sound loaded.
///
/// \param completionHandler Processing after sound playing finished.
- (void)playRemote:(void (^ _Nullable)(void))loadingHandler;

/// Attempt to play local sound.
///
/// \param soundPath Path of sound file in bundle.
- (void)playLocal:(NSString * _Nonnull)soundPath;
- (void)sensorStateChanged:(NSNotificationCenter * _Nonnull)notification;

/// Clear cached data
- (void)clear;

/// Only vibrate the phone when it has been silenced.
+ (void)playVibrate;
+ (void)playSystemSound:(uint32_t)id;
@end

@class AVAudioRecorder;

@interface RTAudio (SWIFT_EXTENSION(RTKit)) <AVAudioRecorderDelegate>
- (void)audioRecorderDidFinishRecording:(AVAudioRecorder * _Nonnull)recorder successfully:(BOOL)flag;
@end

@class AVAudioPlayer;

@interface RTAudio (SWIFT_EXTENSION(RTKit)) <AVAudioPlayerDelegate>
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
@end

@class NSCoder;

SWIFT_CLASS("_TtC5RTKit11RTTopWindow")
@interface RTTopWindow : UIWindow
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)revoke;
@end

@class UIImage;

@interface UIColor (SWIFT_EXTENSION(RTKit))
+ (UIColor * _Nonnull)colorWithRGBOpaque:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha;
+ (UIColor * _Nonnull)colorWithRGB:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue;

/// Get the uiimage as you specified color.
+ (UIImage * _Nonnull)imageWithColor:(UIColor * _Nonnull)color;
+ (UIColor * _Nonnull)colorWithRGBHex:(NSInteger)hex alpha:(float)alpha;
@end


@interface UIImage (SWIFT_EXTENSION(RTKit))

/// Get new UIImage which alpha value as you specified.
- (UIImage * _Nonnull)alpha:(CGFloat)value;

/// Scale image.
- (UIImage * _Nonnull)scale:(CGSize)newSize;
@end


@interface UILabel (SWIFT_EXTENSION(RTKit))
- (void)boldFont;
@end


@interface UINavigationBar (SWIFT_EXTENSION(RTKit))

/// Make navigation bar to be complete transparent.
- (void)totalTransparent;

/// Set a transparent color to navigation bar.
- (void)transparentBgColor:(UIColor * _Nullable)backgroundColor;

/// Set an opaque color to navigation bar.
- (void)opaqueBgColor:(UIColor * _Nonnull)backgroundColor;
@end


@interface UIView (SWIFT_EXTENSION(RTKit))

/// Take a snapshot of current view.
- (UIImage * _Nullable)snapshot;

/// Add a curve-shadow effect for current view.
///
/// It will pass parent layer's contens to sub layer, then set parent layer's
/// contens to nil, then add sub layer to the layer hierachy.
- (void)curveShadow:(CGFloat)cornerRadius;
@end

@class Pop;

@interface UIViewController (SWIFT_EXTENSION(RTKit))

/// Show one view controller immediately.
- (void)show:(UIViewController * _Nullable)toVC fromVC:(UIViewController * _Nullable)fromVC completion:(void (^ _Nullable)(BOOL))completion;

/// Show a popView in current view controller
///
/// \param message Message to show.
///
/// \param ticked Auto removeself or not, set true will remove self automatically, default is true
- (Pop * _Nonnull)showPop:(NSString * _Nullable)message ticked:(BOOL)ticked;
@end


@interface WKWebView (SWIFT_EXTENSION(RTKit))

/// Take a snapshot of current WKWebView.
- (UIImage * _Nullable)snapshot;
@end

#pragma clang diagnostic pop
